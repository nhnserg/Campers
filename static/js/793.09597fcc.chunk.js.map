{"version":3,"file":"static/js/793.09597fcc.chunk.js","mappings":"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","sources":["components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Catalog.jsx"],"sourcesContent":["import styled, { css } from \"styled-components\";\nimport { commonInputStyles } from \"../Modal/FormBook/FormBook.styled\";\nimport { RedButtonStyles } from \"../AdvertCard/AdvertCard.styled\";\n\nconst commonRadioCheckbox = css`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: 5px;\n  text-align: center;\n  font-size: 12px;\n  font-weight: 500;\n  width: 100%;\n  height: 100%;\n  border-radius: 10px;\n  border: 1px solid var(--border-color);\n  padding: 10px;\n  color: var(--text-color);\n  cursor: pointer;\n\n  @media screen and (min-width: 768px) {\n    font-size: 16px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    font-size: 14px;\n    padding: 17px;\n  }\n`;\n\nexport const CatalogContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 50px;\n  padding: 50px 0;\n\n  @media screen and (min-width: 1440px) {\n    flex-direction: row;\n  }\n`;\n\nexport const FormFilters = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 32px;\n  margin-top: 30px;\n`;\n\nexport const GoToPrevPageBtn = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 10px;\n  font-size: 18px;\n  font-weight: 500;\n  margin-bottom: -50px;\n  align-self: flex-start;\n`;\n\nexport const LabelLocation = styled.label`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  font-size: 16px;\n  font-weight: 500;\n  color: var(--light-text);\n\n  svg {\n    position: absolute;\n    top: 45px;\n    left: 15px;\n    fill: none;\n    stroke: var(--text-color);\n  }\n\n  .react-dropdown-select {\n    ${commonInputStyles}\n    padding: 15px;\n    padding-left: 40px;\n    opacity: 1;\n    color: var(--light-text);\n    transition: box-shadow var(--linear-transition);\n\n    &:focus-within {\n      box-shadow: 0 0 5px var(--accent-red);\n    }\n\n    svg {\n      display: none;\n    }\n  }\n\n  .react-dropdown-select-dropdown {\n    width: 100%;\n    background-color: var(--input-background);\n    border-radius: 10px;\n    border: 2px solid var(--accent-red);\n  }\n\n  .react-dropdown-select-item {\n    border-bottom: 1px solid var(--light-text);\n\n    &:hover:not(.react-dropdown-select-item-selected) {\n      color: var(--white);\n      background-color: var(--accent-red);\n      opacity: 0.7;\n    }\n  }\n\n  .react-dropdown-select-item.react-dropdown-select-item-selected,\n  .react-dropdown-select-item.react-dropdown-select-item-active {\n    color: var(--white);\n    font-weight: bold;\n    background-color: var(--accent-red);\n  }\n`;\n\nexport const FiltersWrap = styled.div`\n  font-size: 16px;\n  font-weight: 500;\n  color: var(--light-text);\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n`;\n\nexport const LabelFilters = styled.label`\n  font-size: 20px;\n  font-weight: 600;\n  line-height: 1.2;\n  color: var(--text-color);\n\n  hr {\n    opacity: 0.3;\n    background-color: var(--border-color);\n    display: block;\n    margin: 24px 0;\n  }\n`;\n\nexport const FieldSet = styled.fieldset`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  border: none;\n  padding: 0;\n`;\n\nexport const InputWrap = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: calc((100% - 2 * 10px) / 3);\n  height: 85px;\n\n  @media screen and (min-width: 768px) {\n    width: calc((100% - 4 * 10px) / 5);\n    height: 95px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    width: calc((100% - 2 * 10px) / 3);\n    height: 95px;\n  }\n\n  input {\n    width: 130px;\n    height: 80px;\n    padding: 15px;\n    position: absolute;\n    opacity: 0;\n    cursor: pointer;\n\n    &:checked + div {\n      border-color: var(--accent-red);\n    }\n  }\n`;\n\nexport const RadioBtn = styled.div`\n  ${commonRadioCheckbox}\n`;\n\nexport const CheckBox = styled.div`\n  ${commonRadioCheckbox}\n`;\n\nexport const ButtonsWrap = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  button {\n    ${RedButtonStyles}\n    width: 150px;\n\n    @media screen and (min-width: 1440px) {\n      margin: unset;\n    }\n  }\n\n  #reset-button {\n    background-color: var(--grey);\n    color: var(--light-text);\n    width: 150px;\n\n    @media screen and (min-width: 1440px) {\n      &:hover,\n      &:focus {\n        background-color: var(--input-background);\n        color: var(--light-text);\n      }\n    }\n  }\n`;","import { useState, useRef } from \"react\";\nimport Select from \"react-dropdown-select\";\nimport { LOCATION_OPTIONS, FILTERS_TYPE, FILTERS_EQUIPMENT } from \"../../constants\";\nimport { SearchParams, smoothScroll } from \"../../helpers/index\";\n\nimport {\n    FiltersWrap,\n    FormFilters,\n    LabelFilters,\n    LabelLocation,\n    RadioBtn,\n    CheckBox,\n    FieldSet,\n    InputWrap,\n    ButtonsWrap,\n} from \"./Filter.styled\";\nimport { Icon } from \"components/icons\";\n\nconst FiltersForm = ({ setPage, searchParams, setSearchParams }) => {\n    const [filterParams, setFilterParams] = useState({});\n    const checkbox = useRef(null);\n    const dropdownRef = useRef(null);\n\n    const params = {};\n    SearchParams(searchParams, params);\n\n    const handleFilterAdverts = (e) => {\n        e.preventDefault();\n        setSearchParams({});\n        setPage(1);\n        setSearchParams({ ...filterParams });\n        smoothScroll(\"advertBlock\");\n    };\n\n    const resetFilters = () => {\n        [...checkbox.current?.elements].forEach((input) => {\n            if (input.type === \"checkbox\" || input.type === \"radio\") {\n                input.checked = false;\n            }\n        });\n\n        dropdownRef.current?.clearAll();\n        setSearchParams({});\n        setFilterParams({});\n    };\n\n    return (\n        <FormFilters onSubmit={handleFilterAdverts} ref={checkbox}>\n            <LabelLocation>\n                Location\n                <Select\n                    ref={dropdownRef}\n                    placeholder=\"Location\"\n                    options={LOCATION_OPTIONS}\n                    onChange={(arr) => {\n                        if (arr.length > 0) {\n                            setFilterParams((prev) => ({ ...prev, location: arr[0].value }));\n                        }\n                    }}\n                    closeOnScroll={true}\n                    color=\"var(--accent-red)\"\n                />\n                <Icon width={20} height={20} svg={'icon-pin'} />\n            </LabelLocation>\n\n            <FiltersWrap>\n                Filters\n                <LabelFilters>\n                    Vehicle equipment\n                    <hr />\n                    <FieldSet>\n                        {FILTERS_EQUIPMENT.map(({ name, value, icon: Icon, text }, i) => (\n                            <InputWrap key={`${text}/${i}`}>\n                                <input\n                                    type=\"checkbox\"\n                                    name={name}\n                                    value={value}\n                                    onChange={({ target }) => {\n                                        if (target.checked) {\n                                            setFilterParams((prev) => ({\n                                                ...prev,\n                                                [target.name]: target.value,\n                                            }));\n                                        } else {\n                                            setFilterParams((prev) => {\n                                                const { [target.name]: removedParam, ...rest } = prev;\n                                                return { ...rest };\n                                            });\n                                        }\n                                    }}\n                                />\n                                <CheckBox>\n                                    <Icon width={20} height={20} size={20} /> {text}\n                                </CheckBox>\n                            </InputWrap>\n                        ))}\n                    </FieldSet>\n                </LabelFilters>\n                <LabelFilters>\n                    Vehicle type\n                    <hr />\n                    <FieldSet>\n                        {FILTERS_TYPE.map(({ value, icon: Icon, text }, i) => (\n                            <InputWrap key={`${text}/${i}`}>\n                                <input\n                                    type=\"radio\"\n                                    name=\"type\"\n                                    value={value}\n                                    onChange={({ target }) =>\n                                        setFilterParams((prev) => ({\n                                            ...prev,\n                                            form: target.value,\n                                        }))\n                                    }\n                                />\n                                <RadioBtn>\n                                    <Icon width={20} height={20} /> {text}\n                                </RadioBtn>\n                            </InputWrap>\n                        ))}\n                    </FieldSet>\n                </LabelFilters>\n            </FiltersWrap>\n\n            <ButtonsWrap>\n                <button type=\"submit\">Search</button>\n                <button\n                    id=\"reset-button\"\n                    type=\"button\"\n                    aria-label=\"Reset filter fields\"\n                    onClick={resetFilters}\n                >\n                    Reset\n                </button>\n            </ButtonsWrap>\n        </FormFilters>\n    );\n};\n\nexport default FiltersForm;","import { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { FaArrowLeft } from \"react-icons/fa\";\nimport { getAllAdverts, getTotal } from \"../redux/adverts/operations\";\nimport {\n    selectAdverts,\n    selectError,\n    selectIsLoading,\n    selectTotal,\n} from \"../redux/adverts/selectors\";\nimport { LIMIT } from \"../constants/index\";\nimport SmoothScroll from \"../helpers/SmoothScroll\";\nimport { MainContainer } from \"../layouts/MainContainer\";\nimport FiltersForm from \"../components/Filter/Filter\";\nimport Loader from \"../components/Loader\";\nimport AdvertCard from \"../components/AdvertCard/AdverCard\";\nimport {\n    AdvertsList,\n    CardItem,\n    ListBtnWrap,\n    LoadMoreBtn,\n    NoItemsMsg,\n} from \"../components/AdvertCard/AdvertCard.styled\";\nimport {\n    CatalogContainer,\n    GoToPrevPageBtn,\n} from \"../components/Filter/Filter.styled\";\n\nconst Catalog = () => {\n    const [page, setPage] = useState(1);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [showLoadMore, setShowLoadMore] = useState(true);\n\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n    const adverts = useSelector(selectAdverts);\n    const total = useSelector(selectTotal);\n    const error = useSelector(selectError);\n\n    useEffect(() => {\n        setShowLoadMore(true);\n\n        if (page >= Math.ceil(total / LIMIT)) {\n            setShowLoadMore(false);\n        }\n\n        dispatch(getTotal(searchParams));\n        dispatch(getAllAdverts({ page, limit: LIMIT, searchParams }));\n    }, [dispatch, page, total, searchParams]);\n\n    const handleLoadMore = () => {\n        if (page >= Math.ceil(total / LIMIT) || adverts.length < LIMIT) {\n            setShowLoadMore(false);\n            return;\n        }\n\n        setShowLoadMore(true);\n        setPage((prev) => prev + 1);\n        SmoothScroll(\"goBack\");\n    };\n\n    const handleGoToPrevPage = () => {\n        setPage((prev) => prev - 1);\n        SmoothScroll(\"advertBlock\");\n    };\n\n    return (\n        <>\n            <MainContainer>\n                <CatalogContainer>\n                    <FiltersForm\n                        setPage={setPage}\n                        searchParams={searchParams}\n                        setSearchParams={setSearchParams}\n                    />\n\n                    {page > 1 && (\n                        <GoToPrevPageBtn\n                            id=\"goBack\"\n                            type=\"button\"\n                            onClick={handleGoToPrevPage}\n                        >\n                            <FaArrowLeft size={20} fill=\"var(--text-color)\" />\n                            Go back\n                        </GoToPrevPageBtn>\n                    )}\n\n                    <ListBtnWrap id=\"advertBlock\">\n                        {adverts.length < 0 || error === \"Not found\" ? (\n                            <NoItemsMsg>No items</NoItemsMsg>\n                        ) : (\n                            <AdvertsList>\n                                {adverts.map((card) => (\n                                    <CardItem key={card._id}>\n                                        <AdvertCard card={card} />\n                                    </CardItem>\n                                ))}\n                            </AdvertsList>\n                        )}\n\n                        {showLoadMore && !error && adverts.length > 0 && (\n                            <LoadMoreBtn type=\"button\" onClick={handleLoadMore}>\n                                Load more\n                            </LoadMoreBtn>\n                        )}\n                    </ListBtnWrap>\n                </CatalogContainer>\n            </MainContainer>\n            {isLoading && <Loader />}\n        </>\n    );\n};\n\nexport default Catalog;"],"names":["commonRadioCheckbox","css","_templateObject","_taggedTemplateLiteral","CatalogContainer","styled","_templateObject2","FormFilters","_templateObject3","GoToPrevPageBtn","_templateObject4","LabelLocation","_templateObject5","commonInputStyles","FiltersWrap","_templateObject6","LabelFilters","_templateObject7","FieldSet","_templateObject8","InputWrap","_templateObject9","RadioBtn","_templateObject10","CheckBox","_templateObject11","ButtonsWrap","_templateObject12","RedButtonStyles","_ref","setPage","searchParams","setSearchParams","_useState","useState","_useState2","_slicedToArray","filterParams","setFilterParams","checkbox","useRef","dropdownRef","SearchParams","_jsxs","onSubmit","e","preventDefault","_objectSpread","smoothScroll","ref","children","_jsx","Select","placeholder","options","LOCATION_OPTIONS","onChange","arr","length","prev","location","value","closeOnScroll","color","Icon","width","height","svg","FILTERS_EQUIPMENT","_ref2","i","name","icon","text","type","_ref3","target","checked","_defineProperty","_target$name","rest","_objectWithoutProperties","map","_toPropertyKey","size","concat","FILTERS_TYPE","_ref4","_ref5","form","id","onClick","_checkbox$current","_dropdownRef$current","_toConsumableArray","current","elements","forEach","input","clearAll","page","_useSearchParams","useSearchParams","_useSearchParams2","_useState3","_useState4","showLoadMore","setShowLoadMore","dispatch","useDispatch","isLoading","useSelector","selectIsLoading","adverts","selectAdverts","total","selectTotal","error","selectError","useEffect","Math","ceil","LIMIT","getTotal","getAllAdverts","limit","_Fragment","MainContainer","FiltersForm","SmoothScroll","FaArrowLeft","fill","ListBtnWrap","NoItemsMsg","AdvertsList","card","CardItem","AdvertCard","_id","LoadMoreBtn","Loader"],"sourceRoot":""}